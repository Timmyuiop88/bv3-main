(function (React, designSystem) {
  'use strict';

  function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

  var React__default = /*#__PURE__*/_interopDefault(React);

  const Dashboard = props => {
    const {
      totalUsers,
      totalListings,
      totalOffers,
      pendingVerifications,
      activeListings
    } = props;
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.H2, null, "Dashboard"), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      flex: true,
      flexDirection: "row",
      flexWrap: "wrap",
      mt: "xl"
    }, /*#__PURE__*/React__default.default.createElement(StatBox, {
      title: "Total Users",
      value: totalUsers,
      color: "primary60"
    }), /*#__PURE__*/React__default.default.createElement(StatBox, {
      title: "Active Listings",
      value: activeListings,
      color: "success"
    }), /*#__PURE__*/React__default.default.createElement(StatBox, {
      title: "Pending Verifications",
      value: pendingVerifications,
      color: "warning"
    }), /*#__PURE__*/React__default.default.createElement(StatBox, {
      title: "Total Offers",
      value: totalOffers,
      color: "info"
    })));
  };
  const StatBox = ({
    title,
    value,
    color
  }) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
    flex: true,
    flexDirection: "column",
    variant: "white",
    m: "md",
    p: "xl",
    width: 1 / 4,
    boxShadow: "card"
  }, /*#__PURE__*/React__default.default.createElement(designSystem.H4, {
    mb: "md"
  }, title), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
    fontSize: "xl",
    color: color
  }, value));

  const ImageShow = props => {
    const {
      record
    } = props;
    const srcUrl = record.params.url;
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, srcUrl && /*#__PURE__*/React__default.default.createElement("img", {
      src: srcUrl,
      alt: "Preview",
      style: {
        maxWidth: '100%',
        maxHeight: '300px'
      }
    }));
  };

  const ImagesList = props => {
    const {
      record
    } = props;
    const images = record.params.images || [];
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, images.map((image, index) => /*#__PURE__*/React__default.default.createElement("img", {
      key: index,
      src: image.url,
      alt: `Preview ${index}`,
      style: {
        width: '50px',
        height: '50px',
        objectFit: 'cover',
        marginRight: '5px'
      }
    })));
  };

  const ImagesShow = props => {
    const {
      record
    } = props;
    const images = record.params.images || [];
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Images"), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      flex: true,
      flexDirection: "row",
      flexWrap: "wrap"
    }, images.map((image, index) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      key: index,
      mr: "default",
      mb: "default"
    }, /*#__PURE__*/React__default.default.createElement("img", {
      src: image.url,
      alt: `Preview ${index}`,
      style: {
        maxWidth: '200px',
        maxHeight: '200px',
        objectFit: 'cover'
      }
    })))));
  };

  const DocumentShow = props => {
    const {
      record
    } = props;
    const documentUrl = record.params.data;
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Document"), documentUrl && /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, documentUrl.endsWith('.pdf') ? /*#__PURE__*/React__default.default.createElement("embed", {
      src: documentUrl,
      type: "application/pdf",
      width: "100%",
      height: "600px"
    }) : /*#__PURE__*/React__default.default.createElement("img", {
      src: documentUrl,
      alt: "Document preview",
      style: {
        maxWidth: '100%'
      }
    })));
  };

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.Dashboard = Dashboard;
  AdminJS.UserComponents.ImageShow = ImageShow;
  AdminJS.UserComponents.ImagesList = ImagesList;
  AdminJS.UserComponents.ImagesShow = ImagesShow;
  AdminJS.UserComponents.DocumentShow = DocumentShow;

})(React, AdminJSDesignSystem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
